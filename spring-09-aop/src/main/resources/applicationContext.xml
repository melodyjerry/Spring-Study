<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop
		https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--注册bean-->
    <bean id="userService" class="com.melodyhub.service.UserServiceImpl"/>
    <bean id="log" class="com.melodyhub.log.Log"/>
    <bean id="afterLog" class="com.melodyhub.log.AfterLog"/>

    <!--配置aop,还需要导入aop约束-->

    <!--方式一，使用原生Spring API接口-->
    <!--<aop:config>
        &lt;!&ndash;切入点：expression:表达式，execution（要执行的位置）&ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.melodyhub.service.UserServiceImpl.*(..))"/>
        &lt;!&ndash;UserServiceImpl.*(..) -》 UserServiceImpl类下的所以方法(参数)&ndash;&gt;
        &lt;!&ndash;执行环绕增加&ndash;&gt;
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
        &lt;!&ndash; 环绕,在id="pointcut"的前后切入 &ndash;&gt;
    </aop:config>-->

    <!-- 方式二，自定义 -->
    <!--<bean id="diy" class="com.melodyhub.diy.DiyPointcut"/>
    <aop:config>
        &lt;!&ndash;自定义切面&ndash;&gt;
        <aop:aspect ref="diy">
            &lt;!&ndash;切入点&ndash;&gt;
            <aop:pointcut id="point" expression="execution(* com.melodyhub.service.UserServiceImpl.*(..))"/>
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>-->

    <!--方式三，使用注解实现-->
    <bean id="diyAnnotation" class="com.melodyhub.diy.DiyAnnotation"></bean>
    <!-- 开启自动代理
		实现方式：默认JDK (proxy-targer-class="fasle")
    			 cgbin (proxy-targer-class="true")-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

</beans>